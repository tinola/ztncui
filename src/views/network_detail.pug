//-
  ztncui - ZeroTier network controller UI
  Copyright (C) 2017-2021  Key Networks (https://key-networks.com)
  Licensed under GPLv3 - see LICENSE for details.

extends network_layout

//- Don't display that title
block title

//- Replace the network title with the editable one
block network_title
  h2
    | Network 
    a#change-name(href='#')
      span#name= network.name
      i.glyphicon.glyphicon-pencil(style='font-size: 20px; margin-left: 5px;')
    input#name-input.form-control(type='text' style='width: 200px; display: none;')
    |  (#{network.nwid}):
  script.
    $(function() {
      var nwurl = '/controller/network/#{network.nwid}';
      var name = !{JSON.stringify(network.name)};

      function toggleNameEditor(show) {
        $('#change-name').css('display', !show ? '' : 'none');
        $('#name-input').css('display', show ? 'inline-block' : 'none');
      }

      function submit() {
        var newName = $('#name-input').val();
        if (newName != name) {
          name = newName;
          $.post(nwurl + '/name', {'name': name})
            .done(function () {
              $('#name').text(newName);
            });
        }
        toggleNameEditor(false);
      }

      $('#change-name').on('click', function() {
        toggleNameEditor(true);
        $('#name-input').val(name);
        $('#name-input').focus();
      });
      $('#name-input').on('focusout', submit);
      $('#name-input').keypress(function (e) {
        if (e.which == 13) submit();
      });
    });

block net_content
  - const nwurl = '/controller/network/' + network.nwid;

  a.btn.btn-primary(style="margin: 5px" href=(nwurl + '/private') role='button')
    = network.private ? "Private" : "Public"
  a.btn.btn-primary(style="margin: 5px" href=(nwurl + '/easy') role='button') Easy setup
  a.btn.btn-primary(style="margin: 5px" href=(nwurl + '/routes') role='button') Routes
  a.btn.btn-primary(style="margin: 5px" href=(nwurl + '/rules') role='button') Rules
  a.btn.btn-primary(style="margin: 5px" href=(nwurl + '/ipAssignmentPools') role='button') Assignment Pools
  a.btn.btn-primary(style="margin: 5px" href=(nwurl + '/v4AssignMode') role='button') IPv4 Assign Mode
  a.btn.btn-primary(style="margin: 5px" href=(nwurl + '/v6AssignMode') role='button') IPv6 Assign Mode
  a.btn.btn-primary(style="margin: 5px" href=(nwurl + '/dns') role='button') DNS

  if (members !== undefined)
    script.
      $(function() {
        const url = "#{nwurl}/members";
        $('.authCheck').on('click', function() {
          $.post(url, {'id': this.value, 'auth': this.checked});
        });
        $('.bridgeCheck').on('click', function() {
          $.post(url, {'id': this.value, 'activeBridge': this.checked});
        });
        $('.text').on('change', function() {
          $.post(url, {'id': this.name, 'name': this.value});
        });
      });
    h3#members Members (#{members.length}) 
     a.btn.btn-default(href='' name='refresh' role='button') Refresh
     input#q.form-control.text(type='text' name='q' autocomplete='off' style='width: 200px; display: inline-block; vertical-align: middle; margin-left: 10px;' placeholder='Search for...' onkeyup='doSearch();')

    form(method='POST' action='')
      table#tbl-members.table.table-responsive.table-striped.table-hover
        tr
          th(width='3%')
            = ''
          th(width='20%' style='vertical-align: middle;')
            | Member name
          th(width='10%' style='vertical-align: middle;')
            | Member ID
          th(width='10%' style='vertical-align: middle; text-align: center;')
            | Authorized
          th(width='10%' style='vertical-align: middle; text-align: center;')
            | Active bridge
          th(width='17%' style='vertical-align: middle;')
            | IP assignment
          th(width='17%' style='vertical-align: middle;')
            | Peer status
          th(width='23%')
            | Peer address
            br
            | (latency / last active)
        each member in members
          - const peer = member.peer;
          tr
            - const url = nwurl + '/member/' + member.id
            td
              a(href=url + '/delete')
                i.glyphicon.glyphicon-trash
            td
              input.form-control.text(type='text' name=member.id value=member.name)
            td
              a(href=url) #{member.id}
            td(style='text-align: center;')
              input.authCheck(type='checkbox' value=member.id checked=(member.authorized? true : false))
            td(style='text-align: center;')
              input.bridgeCheck(type='checkbox' value=member.id checked=(member.activeBridge? true : false))
            td
              each ipAssignment in member.ipAssignments
                a(href=nwurl + '/member/' + member.id + '/ipAssignments')
                  each digit in ipAssignment
                    = digit
                  = ' '
              else
                a(href=nwurl + '/member/' + member.id + '/ipAssignments')
                  | IP assignment
            td
              if (peer && peer.latency != -1 && peer.versionMajor != -1)
                if (peer.latency != -1)
                  span(style='color: green;')
                    | ONLINE (v#{peer.version})
                else
                  span(style='color: orange;')
                    | RELAY (v#{peer.version})
              else if (member.id == zt_address)
                span(style='color: green;') CONTROLLER
              else
                span(style='color: red;') OFFLINE
            td
              if (peer)
                - var paths = peer.paths.sort((a, b) => b.lastReceive - a.lastReceive)
                if (paths.length > 0)
                  - const [ip, port] = paths[0].address.split('/');
                  = ip
                  span(style='color: gray;') /#{port}
                  = ' '
                if (peer.latency != -1)
                  br
                  | (
                  =peer.latency
                  | ms
                  if (paths.length > 0)
                    |  / #{Math.floor((Date.now() - paths[0].lastReceive) / 1000)}s ago
                  |)
        else
          .alert.alert-info
            strong There are no members on this network - invite users to join #{network.nwid}

  a.btn.btn-default(href='' name='refresh' role='button') Refresh

  h3#detail Detail for network
  each value, key in network
    .row(style='margin: 5px 0;')
      .col-sm-2
        a(href= network.nwid + '/' + key) #{key}:
      .col-sm-10
        +json_value(value)

  a.btn.btn-default(href='/controller/networks' name='networks' role='button' style='margin-top: 10px;') Networks

  script(type='text/javascript').
    //<!--
     function doSearch() {
       // search only columns 2, 3, 6, 7 and 8 in the members table
       var input, filter, tr, td, i, col2, col3, col6, col7, col8;
       input = document.getElementById("q");
       filter = input.value.toUpperCase();
       table = document.getElementById("tbl-members");
       tr = table.getElementsByTagName("tr");
       for (i = 1; i < tr.length; i++) {
         td2 = tr[i].getElementsByTagName("td")[1];
         td3 = tr[i].getElementsByTagName("td")[2];
         td6 = tr[i].getElementsByTagName("td")[5];
         td7 = tr[i].getElementsByTagName("td")[6];
         td8 = tr[i].getElementsByTagName("td")[7];
         if (td2 || td3 || td6 || td7 || td8) {
           col2 = td2.textContent || td2.innerHTML;
           col3 = td3.textContent || td3.innerText;
           col6 = td6.textContent || td6.innerText;
           col7 = td7.textContent || td7.innerText;
           col8 = td8.textContent || td8.innerText;
           if ((col2.toUpperCase().indexOf(filter) > -1) ||
               (col3.toUpperCase().indexOf(filter) > -1) ||
               (col6.toUpperCase().indexOf(filter) > -1) ||
               (col7.toUpperCase().indexOf(filter) > -1) ||
               (col8.toUpperCase().indexOf(filter) > -1)) {
             tr[i].style.display = "";
           } else {
             tr[i].style.display = "none";
           }
         }
       }
     }
    //-->
